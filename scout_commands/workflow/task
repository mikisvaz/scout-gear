#!/usr/bin/env ruby

require 'scout'

$0 = "scout #{$previous_commands.any? ? $previous_commands*" " + " " : "" }#{ File.basename(__FILE__) }" if $previous_commands

options = SOPT.setup <<EOF

Run a workflow job

$ #{$0} [<options>] <workflow> <task>

-h--help Print this help
-jn--job_name* Name to use as job identifier
-pf--print_filepath Print the file path
-prov--provenance Print the step provenance
-cl--clean Clean the last step
-rcl--recursive_clean Clean all steps
EOF

workflow_name, task_name = ARGV

raise MissingParameterException.new :workflow if workflow_name.nil?

workflow = Workflow.require_workflow workflow_name
task_name = task_name.to_sym if task_name
task = workflow.tasks[task_name.to_sym] if task_name

options[:help] = true if task.nil?

help, provenance, clean, recursive_clean, jobname, print_filepath = IndiferentHash.process_options options, :help, :provenance, :clean, :recursive_clean, :job_name, :print_filepath

if help
  if defined? scout_usage
    scout_usage 
  else
    puts SOPT.doc
  end

  puts workflow.usage(task) if workflow
  exit 0
end

job_options = task.get_SOPT(task)
job = workflow.job(task_name, jobname, job_options)

job.recursive_clean if recursive_clean
job.clean if clean

if provenance
  puts Step.prov_report(job)
else
  job.run unless job.done?

  if print_filepath
    job.join
    path = job.path
    path = path.find if Path === path
    puts path
  else
    if ! ((c = Open.consume_stream(job.stream, false, STDOUT, false)) && c.end_with?("\n"))
      puts
    end
  end
end


