scout-gear=/$PWD filter="*.rb *.yaml" {
 Rakefile
 bin=bin filter="*"{
  scout
 }
 scout_commands=scout_commands filter="*"{
  rbbt
  alias
  find
  glob
  log
  doc
  update
  template
  offsite
  workflow=workflow{
   task
   list
   info
   write_info
   install
   trace
   prov
  }
  batch=batch{
   list
   clean
  }
  resource=resource{
   produce
  }
 }
 lib=lib {
  scout-gear.rb
  workflow-scout.rb
  rbbt-scout.rb
  scout.rb
  scout=scout{
   workflow.rb
   workflow=workflow{
    definition.rb
    documentation.rb
    usage.rb
    util.rb
    step.rb
    step=step{
     config.rb
     dependencies.rb
     file.rb
     info.rb
     load.rb
     progress.rb
     provenance.rb
     status.rb
     inputs.rb
    }
    task.rb
    task=task{
     dependencies.rb
     inputs.rb
    }
    deployment.rb
    deployment=deployment{
     orchestrator.rb
    }
   }
   semaphore.rb
   work_queue.rb
   work_queue=work_queue{
    socket.rb
    worker.rb
   }
   tsv.rb
   tsv=tsv{
    util.rb
    util=util{
     select.rb
     process.rb
     unzip.rb
     reorder.rb
     sort.rb
     melt.rb
    }
    entity.rb
    parser.rb
    dumper.rb
    transformer.rb
    persist.rb
    persist=persist{
     adapter.rb
     serialize.rb
     tokyocabinet.rb
     tkrzw.rb
     fix_width_table.rb
    }
    index.rb
    traverse.rb
    attach.rb
    change_id.rb
    change_id=change_id{
     translate.rb
    }
    meta_extension.rb
    path.rb
    stream.rb
    open.rb
    csv.rb
   }
   entity.rb
   entity=entity{
    property.rb
    object.rb
    format.rb
    identifiers.rb
   }
   association.rb
   association=association{
    fields.rb
   }

   offsite.rb
   offsite=offsite{
    ssh.rb
    sync.rb
    step.rb
   }
  }
 }
 test=test {
  test_helper.rb
  test_scout-gear.rb
  data=data{
   person=person{
    identifiers
    marriages
    brothers
   }
  }
  scout=scout{
   test_cmd.rb
   test_concurrent_stream.rb
   test_config.rb
   test_indiferent_hash.rb
   test_log.rb
   test_meta_extension.rb
   test_misc.rb
   test_named_array.rb
   test_open.rb
   test_path.rb
   test_persist.rb
   test_resource.rb
   test_semaphore.rb
   test_tmpfile.rb
   test_tsv.rb
   test_work_queue.rb
   test_workflow.rb
   work_queue=work_queue{
    test_socket.rb
    test_worker.rb
   }
   workflow=workflow{
    test_definition.rb
    test_documentation.rb
    test_step.rb
    test_task.rb
    test_usage.rb
    test_util.rb
    step=step{
     test_dependencies.rb
     test_info.rb
     test_load.rb
     test_provenance.rb
     test_status.rb
    }
    task=task{
     test_dependencies.rb
     test_inputs.rb
    }
    deployment=deployment{
     test_orchestrator.rb
    }
   }
   tsv=tsv{
    test_attach.rb
    test_change_id.rb
    test_dumper.rb
    test_index.rb
    test_open.rb
    test_parser.rb
    test_persist.rb
    test_stream.rb
    test_transformer.rb
    test_traverse.rb
    test_util.rb
    util=util{
     test_filter.rb
     test_melt.rb
     test_process.rb
     test_reorder.rb
     test_select.rb
     test_sort.rb
     test_unzip.rb
    }
    persist=persist{
     test_adapter.rb
     test_fix_width_table.rb
     test_tokyocabinet.rb
    }
   }
   offsite=offsite{
    test_ssh.rb
    test_step.rb
    test_sync.rb
    test_task.rb
   }
  }
 }
 share=share{
  software=software{
   install_helpers
  }
  templates=templates{
   workflow.rb
  }
 }

 modules=modules_{
  rbbt-util=rbbt-util filter="*.rb *.rake Rakefile *.rdoc *.R *.sh *.js *.haml *.sass *.txt *.conf LICENSE" {
   bin=bin filter="*" {
   }
   lib=lib{
    rbbt=rbbt{
     util=util{
      misc=misc{
      }
      log=log{
       progress=progress{
       }
      }
      simpleopt=simpleopt{
      }
      R=R{
      }
      python=python{
      }
      concurrency=concurrency{
       processes=processes{
       }
      }
     }
     workflow=workflow{
      step=step{
      }
      util=util{
      }
      remote_workflow=remote_workflow{
       driver=driver{
       }
       remote_step=remote_step{
       }
      }
      integration=integration{
       ansible=ansible{
       }
      }
     }
     hpc=hpc{
      old=old{
      }
      orchestrate=orchestrate{
      }
     }
     tsv=tsv{
      attach=attach{
      }
      parallel=parallel{
      }
     }
     persist=persist{
      tsv=tsv{
       tokyocabinet=tokyocabinet{
       }
      }
     }
     resource=resource{
      path=path{
      }
     }
     annotations=annotations{
     }
     entity=entity{
     }
     association=association{
     }
     knowledge_base=knowledge_base{
     }
    }
   }
   test=test {
    data=data filter="*"{
    }
    rbbt=rbbt{
     resource=resource{
     }
     workflow=workflow{
     }
     association=association{
     }
     knowledge_base=knowledge_base{
     }
     persist=persist{
      tsv=tsv{
      }
     }
     tsv=tsv{
      parallel=parallel{
      }
     }
     entity=entity{
     }
     util=util{
      R=R{
      }
      misc=misc{
      }
      simpleopt=simpleopt{
      }
      concurrency=concurrency{
      }
     }
    }
   }
   python=python filter="*"{
   }
   integration_test=integration_test{
   }
   etc=etc filter="*"{
    app.d=app.d{
    }
   }
   share=share{
    color=color filter="*"{
    }
    rbbt_commands=rbbt_commands filter="*"{
     system=system{
     }
     conf=conf{
      web_user=web_user{
      }
     }
     resource=resource{
     }
     workflow=workflow{
      remote=remote{
      }
     }
     hpc=hpc{
     }
     app=app{
     }
     association=association{
     }
     tsv=tsv{
     }
     stat=stat{
     }
     study=study{
     }
     file_server=file_server{
     }
     benchmark=benchmark{
     }
    }
    Rlib=Rlib{
    }
    software=install/software filter="*"{
     zran=zran{
     }
     lib=lib{
     }
    }
   }
  }
 }
}
